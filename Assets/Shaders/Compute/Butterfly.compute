#pragma kernel CSMain

#include "UnityCG.cginc"
#include "../Includes/common.cginc"
#include "../Includes/noise.cginc"

struct Complex {
    float real;
    float im;
};

Complex mul(Complex c0, Complex c1){
    Complex c;
    c.real = c0.real * c1.real - c0.im * c1.im;
    c.im = c0.real * c1.im + c0.im * c1.real;
    return c;
}

Complex add(Complex c0, Complex c1) {
    Complex c;
    c.real = c0.real + c1.real;
    c.im = c0.im + c1.im;
    return c;
}

Complex conj(Complex c){
    Complex c_conj;
    c_conj.real = c.real;
    c_conj.im = -c.im;
    return c_conj;
}

StructuredBuffer<int> bit_reversed_buffer;
RWStructuredBuffer<float4> butterfly_buffer;
float resolution;


[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x + id.y * 8;
    float k = (id.y * (resolution / pow(2, id.x + 1))) % (int)resolution;
    Complex twiddle = {cos(2.0 * PI * k / resolution), sin(2.0 * PI * k / resolution)};

    int butterflySpan = (int)pow(2, id.x);

    int butterflyWing;
    if((id.x % pow(2, id.x + 1)) < pow(2, id.x)){
        butterflyWing = 1;
    }
    else {
        butterflyWing = 0;
    }

    if(id.x == 0){
        if(butterflyWing == 1){
            butterfly_buffer[index] = float4(twiddle.real, twiddle.im, bit_reversed_buffer[(int)id.y], bit_reversed_buffer[(int)id.y + 1]);
        }
        else {
            butterfly_buffer[index] = float4(twiddle.real, twiddle.im, bit_reversed_buffer[id.y - 1], bit_reversed_buffer[id.y]);
        }
    }
    else {
        if(butterflyWing == 1){
            butterfly_buffer[index] = float4(twiddle.real, twiddle.im, id.y, id.y + butterflySpan);
        }
        else {
            butterfly_buffer[index] = float4(twiddle.real, twiddle.im, id.y - butterflySpan, id.y);
        }
    }   
}
