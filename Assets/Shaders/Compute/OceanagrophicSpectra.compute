#include "UnityCG.cginc"
#include "../Includes/common.cginc"
#include "../Includes/complex.cginc"
#include "../Includes/noise.cginc"

#pragma kernel CS_InitializeSpectrum
#pragma kernel CS_ConjugateSpectrum
#pragma kernel CS_UpdateSpectrum
#pragma kernel CS_Assemble

RWTexture2D<float4> _InitialSpectrum, _WavesData;
RWTexture2D<float2> _SpectrumDxDz, _SpectrumDyDxy, _SpectrumDyxDyz, _SpectrumDxxDzz;
RWTexture2D<float4> _Displacement, _Slope;
uint _LengthScale, _MapSize;
float _Amplitude, _WindSpeed, _Depth, _Lambda, _LowPass, _HighPass;
float2 _WindDirection;

float4 GaussianRandom(float2 uv){
    //TODO: Try sampling noise texture rather than generating
    float n0 = clamp(whiteNoise_2D(uv, 1), 0.001, 1.0);
    float n1 = clamp(whiteNoise_2D(uv, 1324), 0.001, 1.0);
    float n2 = clamp(whiteNoise_2D(uv, 46512), 0.001, 1.0);
    float n3 = clamp(whiteNoise_2D(uv, 798654), 0.001, 1.0);

    float u0 = 2.0 * PI * n0;
    float v0 = sqrt(-2.0 * log(n1));
    float u1 = 2.0 * PI * n2;
    float v1 = sqrt(-2.0 * log(n3));

    float4 rand = float4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));

    return rand;
}

float Dispersion(float kMag) {
    return sqrt(GRAVITY  * kMag * tanh(min(kMag * _Depth, 20)));
}

float DispersionDerivative(float kMag) {
    float th = tanh(min(kMag * _Depth, 20));
    float ch = cosh(kMag * _Depth);
    return GRAVITY * (_Depth * kMag / ch / ch + th) / Dispersion(kMag) / 2.0f;
}

float2 PhillipsSpectrum(float2 k){
    float kLength = length(k);
    if(kLength < 0.00001) kLength = 0.00001;

    float kLength2 = kLength * kLength;
    float kLength4 = kLength2 * kLength2;

    float kDotW = dot(normalize(k), normalize(_WindDirection));
    float kDotW2 = kDotW * kDotW * kDotW * kDotW * kDotW * kDotW;

    float L = (_WindSpeed * _WindSpeed) / GRAVITY;
    float L2 = L * L;

    //TODO: Experiment with damping
    float damping = 1.0 / 2000.0;
    float l2 = L2 * damping * damping;

    //TODO: think about removing A to general amplitude ?
    float test =  _Amplitude * exp(-1.0 / (kLength2 * L2)) / kLength4 * kDotW2 * exp(-kLength2 * l2);

    //Why does this need to be clamped? Why sqrt(test) and / sqrt(2) ???? i dont know but it works
    return clamp(sqrt(test) / sqrt(2.0), -4000, 4000);

}

[numthreads(8,8,1)]
void CS_InitializeSpectrum (uint3 id : SV_DispatchThreadID)
{
    float deltaK = 2 * PI / _LengthScale;
    int nx = id.x - _MapSize / 2;
    int nz = id.y - _MapSize / 2;
    float2 k = float2(nx, nz) * deltaK;
    float kLength = length(k);
    
    if(kLength <= _HighPass && kLength >= _LowPass){

        float omega = Dispersion(kLength);
        float dOmegak = DispersionDerivative(kLength);
        _WavesData[id.xy] = float4(k.x, 1 / kLength, k.y, omega);
    
        float spectrum = PhillipsSpectrum(k);
        float4 rand = GaussianRandom(float2(id.xy) / (float)_MapSize);
    
        //TODO: Investigate this and other spectrums
        // float2 h0k = rand.xy * sqrt(2.0 * spectrum * abs(dOmegak) / kLength * deltaK * deltaK);
        float2 h0k = rand.xy * sqrt(2.0 * spectrum);
        
        _InitialSpectrum[id.xy] = float4(h0k, 0, 0);
    }
    else{
        _InitialSpectrum[id.xy] = 0;
        _WavesData[id.xy] = float4(k.x, 1, k.y, 0);
    }

}

[numthreads(8,8,1)]
void CS_ConjugateSpectrum(uint3 id : SV_DispatchThreadID){
    float2 h0k = _InitialSpectrum[id.xy].rg;
    float2 h0minusK = _InitialSpectrum[uint2((_MapSize - id.x) % _MapSize, (_MapSize - id.y) % _MapSize)];
    _InitialSpectrum[id.xy] = float4(h0k, h0minusK.x, -h0minusK.y);
}

[numthreads(8,8,1)]
void CS_UpdateSpectrum(uint3 id: SV_DispatchThreadID)
{
    float4 wave = _WavesData[id.xy];
    float phase = wave.w * _Time.y;
    float2 exponent = float2(cos(phase), sin(phase));
    float2 h = ComplexMult(_InitialSpectrum[id.xy].xy, exponent) + ComplexMult(_InitialSpectrum[id.xy].zw, float2(exponent.x, -exponent.y));
    float ih = float2(-h.y, h.x);

    float2 displacementX = ih * wave.x * wave.y;
    float2 displacementY = h;
    float2 displacementZ = ih * wave.z * wave.y;

    float2 displacementX_dx = -h * wave.x * wave.x * wave.y;
    float2 displacementY_dx = ih * wave.x;
    float2 displacementZ_dx = -h * wave.x * wave.z * wave.y;

    float2 displacementY_dz = ih * wave.z;
    float2 displacementZ_dz = -h * wave.z * wave.z * wave.y;

    //Dx_Dz
    _SpectrumDxDz[id.xy] = float2(displacementX.x - displacementZ.y, displacementX.y + displacementZ.x);
    //Dy_Dxy
    _SpectrumDyDxy[id.xy] = float2(displacementY.x - displacementZ_dx.y, displacementY.y + displacementZ_dx.x);
    //Dyx_Dyz
    _SpectrumDyxDyz[id.xy] = float2(displacementY_dx.x - displacementY_dz.y, displacementY_dx.y + displacementY_dz.x);
    //Dxx_Dzz
    _SpectrumDxxDzz[id.xy] = float2(displacementX_dx.x - displacementZ_dz.y, displacementX_dx.y + displacementZ_dz.x);

}

[numthreads(8,8,1)]
void CS_Assemble(uint3 id: SV_DispatchThreadID)
{
    float2 DxDz = _SpectrumDxDz[id.xy];
    float2 DyDxy = _SpectrumDyDxy[id.xy];
    float2 DyxDyz = _SpectrumDyxDyz[id.xy];
    float2 DxxDzz = _SpectrumDxxDzz[id.xy];

    _Displacement[id.xy] = float4(_Lambda * DxDz.x, DyDxy.x, _Lambda * DxDz.y, 1.0);
    _Slope[id.xy] = float4(DyxDyz, DxxDzz * _Lambda);
}
