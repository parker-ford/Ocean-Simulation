#pragma kernel CSMain

#include "UnityCG.cginc"
#include "../Includes/common.cginc"
#include "../Includes/noise.cginc"


RWTexture2D<float2> h0k_buffer;
RWTexture2D<float2> h0k_inv_buffer;


float resolution;

int _L;
float _A;
float2 _WindDirection;
float _WindSpeed;


float4 gaussRND(float2 uv) {
    float n0 = clamp(whiteNoise_2D(uv, 1), 0.001, 1.0);
    float n1 = clamp(whiteNoise_2D(uv, 1324), 0.001, 1.0);
    float n2 = clamp(whiteNoise_2D(uv, 46512), 0.001, 1.0);
    float n3 = clamp(whiteNoise_2D(uv, 798654), 0.001, 1.0);

    float u0 = 2.0 * PI * n0;
    float v0 = sqrt(-2.0 * log(n1));
    float u1 = 2.0 * PI * n2;
    float v1 = sqrt(-2.0 * log(n3));

    float4 rand = float4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));

    return rand;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    float2 uv = float2(id.xy) / resolution;
    float2 x = float2(id.xy) - resolution / 2.0;
    float2 k = float2(2.0 * PI * x.x / _L, 2.0 * PI * x.y / _L);

    float L_ = (_WindSpeed * _WindSpeed) / GRAVITY;
    float mag = length(k);
    if(mag < 0.00001) mag = 0.00001;
    float magSq = mag * mag;

    float h0k = clamp(sqrt(( _A / (magSq * magSq))
    * pow(dot(normalize(k), normalize(_WindDirection)), 6.0)
    * exp(-(1.0/(magSq * L_ * L_)))
    * exp(-magSq * pow( _L / 2000.0, 2.0))) / sqrt(2.0), -4000.0, 4000.0);

    float h0kminus = clamp(sqrt (( _A / (magSq * magSq))
    * pow(dot(normalize(-k), normalize(_WindDirection)), 6.0)
    * exp(-(1.0/(magSq * L_ * L_)))
    * exp(-magSq*pow(_L / 2000.0, 2.0))) / sqrt(2.0), -4000, 4000);

    float4 rand = gaussRND(uv);

    // h0k_buffer[id.x + id.y * resolution] = rand.xy * h0k;
    h0k_buffer[id.xy] = rand.xy * h0k;
    // h0k_inv_buffer[id.x + id.y * resolution] = rand.zw * h0kminus;
    h0k_inv_buffer[id.xy] = rand.zw * h0kminus;
}
